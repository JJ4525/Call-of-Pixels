import tkinter as tk
from tkinter import ttk
import os
import time
import base64
from io import BytesIO
import heapq
try:
    import pygame
    pygamePIP = True
except ImportError:
    pygamePIP = False
weapon1 = 1
weapon2 = 1
player_size = 10
color1 = "#ed3419"
color2 = "#023e8a"
outline_color1 = "#c61a39"
outline_color2 = "#03045e"
resize = 3 
movement_distance1 = 4
movement_distance2 = 4
health1 = 100
health2 = 100
def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def a_star(grid, start, end):
    start_node = Node(start)
    end_node = Node(end)

    open_list = []
    closed_set = set()

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_set.add(current_node.position)

        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1]

        (x, y) = current_node.position
        neighbors = [(x-10, y), (x+10, y), (x, y-10), (x, y+10)]

        for next_position in neighbors:
            if next_position[0] < 0 or next_position[0] >= 1000 or next_position[1] < 0 or next_position[1] >= 1000:
                continue

            if next_position in closed_set:
                continue

            next_node = Node(next_position, current_node)

            if any("obstacle" in grid.gettags(obj) for obj in grid.find_overlapping(next_position[0], next_position[1], next_position[0]+10, next_position[1]+10)):
                continue

            next_node.g = current_node.g + 10
            next_node.h = ((next_node.position[0] - end_node.position[0]) ** 2 + (next_node.position[1] - end_node.position[1]) ** 2) ** 0.5
            next_node.f = next_node.g + next_node.h

            if next_node.position not in (node.position for node in open_list):
                heapq.heappush(open_list, next_node)

    return None

class base_game:
    def __init__(self):
        self.pulsanti = []
        self.last_pressed = {}
        self.resize = resize
        self.map_height = 1000
        self.map_width = 1000
        self.weapon_offset = 3
        self.path = os.path.dirname(os.path.abspath(__file__))
        self.weapon_coordinates = ([[[10.5, 4.9], [16, 5.1], '#807A7A'],[[10.5, 4.5], [16, 5.5], '#807A7A'], [[10.5, 5.5], [12, 8], '#595758'], [[12, 5.5], [16, 6], '#595758']], [[[10, 4.9], [26, 5.1], '#7F807A'],[[10, 3], [11, 7], '#7F807A'], [[11, 4], [21, 6], '#D39741'], [[14, 4], [16, 3], '#323232'], [[12, 3], [18, 2], '#817C78'], [[13, 6], [15, 9], '#494748'], [[21, 4.5], [26, 5.5], '#9D9D95']],[[[9,8.6],[23,8.4],"#ffffff"],[[9.2, 3.7], [11, 4.5], '#231F20'], [[9.5, 4.5], [10, 5], '#494949'], [[9, 5], [12, 9], '#1F1F1F'], [[12, 7], [23, 6], '#5B5B5B'], [[12, 7], [23, 8], '#666666'], [[12, 9], [23, 8], '#5B5B5B'], [[20, 6], [21, 9], '#333333'], [[17, 6], [18, 9], '#333333'], [[14, 6], [15, 9], '#333333'], [[9.5, 6.5], [11.5, 7], '#171717'], [[9.65, 7], [11.35, 12.35], '#63331f'], [[9.75, 7.25], [10.9, 7.75], '#FEEA3B'], [[10.9, 7.25], [11.25, 7.75], '#FEC006'], [[9.75, 8.0], [10.9, 8.5], '#FEEA3B'], [[10.9, 8.0], [11.25, 8.5], '#FEC006'], [[9.75, 8.75], [10.9, 9.25], '#FEEA3B'], [[10.9, 8.75], [11.25, 9.25], '#FEC006'], [[9.75, 9.5], [10.9, 10.0], '#FEEA3B'], [[10.9, 9.5], [11.25, 10.0], '#FEC006'], [[9.75, 10.25], [10.9, 10.75], '#FEEA3B'], [[10.9, 10.25], [11.25, 10.75], '#FEC006'], [[9.75, 11.0], [10.9, 11.5], '#FEEA3B'], [[10.9, 11.0], [11.25, 11.5], '#FEC006'], [[9.75, 11.75], [10.9, 12.25], '#FEEA3B'], [[10.9, 11.75], [11.25, 12.25], '#FEC006']], [[[10, 4.4], [23, 4.6], '#383838'],[[10, 3], [20, 6], '#383838'], [[10, 6], [13, 7], '#383838'], [[11, 7], [12, 9], '#707070'], [[14, 6], [15, 8], '#292929'], [[13, 1], [14, 3], '#383838'], [[13, 1], [19, 2], '#383838'], [[19, 1], [18, 3], '#383838'], [[20, 4], [23, 5], '#2B2B2B']])
        self.bullet_coordinates = ([[16, 4.8], [16.5, 5.2]], [[26, 4.7], [27.5, 5.3]], [[[23, 6.4], [23.3, 6.6]], [[23, 7.4], [23.3, 7.6]], [[23, 8.4], [23.3, 8.6]]], [[23, 4.25], [24, 4.75]])
        self.map_coordinates = ([[0,0],[10,1000],"#000000"],[[0,0],[1000,10],"#000000"],[[1000,10],[990,1000],"#000000"],[[10,1000],[990,990],"#000000"],[[399.0, 899.0], [411.0, 951.0], '#000000'], [[139.0, 899.0], [191.0, 911.0], '#000000'], [[659.0, 839.0], [671.0, 911.0], '#000000'], [[239.0, 799.0], [251.0, 851.0], '#000000'], [[79.0, 799.0], [91.0, 851.0], '#000000'], [[139.0, 739.0], [191.0, 751.0], '#000000'], [[549.0, 719.0], [561.0, 791.0], '#000000'], [[729.0, 679.0], [811.0, 691.0], '#000000'], [[39.0, 639.0], [111.0, 651.0], '#000000'], [[539.0, 629.0], [561.0, 641.0], '#000000'], [[439.0, 629.0], [461.0, 641.0], '#000000'], [[559.0, 619.0], [581.0, 631.0], '#000000'], [[419.0, 619.0], [441.0, 631.0], '#000000'], [[579.0, 609.0], [591.0, 621.0], '#000000'], [[409.0, 609.0], [421.0, 621.0], '#000000'], [[589.0, 599.0], [601.0, 611.0], '#000000'], [[399.0, 599.0], [411.0, 611.0], '#000000'], [[599.0, 589.0], [611.0, 601.0], '#000000'], [[389.0, 589.0], [401.0, 601.0], '#000000'], [[609.0, 579.0], [621.0, 591.0], '#000000'], [[379.0, 579.0], [391.0, 591.0], '#000000'], [[619.0, 559.0], [631.0, 581.0], '#000000'], [[369.0, 559.0], [381.0, 581.0], '#000000'], [[629.0, 559.0], [821.0, 549.0], '#000000'], [[299.0, 549.0], [371.0, 559.0], '#000000'], [[179.0, 549.0], [221.0, 559.0], '#000000'], [[221.0, 549.0], [211.0, 621.0], '#000000'], [[299.0, 549.0], [309.0, 621.0], '#000000'], [[179.0, 439.0], [371.0, 449.0], '#000000'], [[619.0, 419.0], [631.0, 441.0], '#000000'], [[369.0, 419.0], [381.0, 441.0], '#000000'], [[609.0, 409.0], [621.0, 421.0], '#000000'], [[379.0, 409.0], [391.0, 421.0], '#000000'], [[599.0, 399.0], [611.0, 411.0], '#000000'], [[389.0, 399.0], [401.0, 411.0], '#000000'], [[589.0, 389.0], [601.0, 401.0], '#000000'], [[399.0, 389.0], [411.0, 401.0], '#000000'], [[779.0, 379.0], [789.0, 449.0], '#000000'],[[691.0, 379.0], [701.0, 449.0], '#000000'], [[629.0, 439.0], [701.0, 449.0], '#000000'], [[579.0, 379.0], [591.0, 391.0], '#000000'], [[409.0, 379.0], [421.0, 391.0], '#000000'], [[559.0, 369.0], [581.0, 381.0], '#000000'], [[419.0, 369.0], [441.0, 381.0], '#000000'], [[539.0, 359.0], [561.0, 371.0], '#000000'], [[439.0, 359.0], [461.0, 371.0], '#000000'], [[889.0, 349.0], [961.0, 361.0], '#000000'], [[189.0, 309.0], [271.0, 321.0], '#000000'], [[809.0, 249.0], [861.0, 261.0], '#000000'], [[439.0, 209.0], [451.0, 281.0], '#000000'], [[909.0, 149.0], [921.0, 201.0], '#000000'], [[749.0, 149.0], [761.0, 201.0], '#000000'], [[809.0, 89.0], [861.0, 101.0], '#000000'], [[329.0, 89.0], [341.0, 161.0], '#000000'], [[589.0, 49.0], [601.0, 101.0], '#000000'])
        self.weapon_stats = ([10, 5, 0.14, 0.2],[70, 15, 1.05, 3],[6, 5, 0.11, 0.05],[15, 10, 0.1, 0.5])
        self.sniper_reload = ""
        self.sniper_shoot = ""
        self.burst_shoot = "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"
        self.pistol_shoot = "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"
        self.minigun_shoot = "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"
        
    def collision_detection(self, obj1, obj2):
        x1, y1, x2, y2 = mappa.bbox(obj1)
        x1o, y1o, x2o, y2o = mappa.bbox(obj2)
        return not (x2 < x1o or x1 > x2o or y2 < y1o or y1 > y2o)
    
    def esci(self, Event = None):
        base.destroy()

    def map_plot(self, event=None):
        for x in range(len(self.map_coordinates)):
            m = self.map_coordinates
            mappa.create_rectangle(m[x][0], m[x][1], fill=m[x][2], tags="mappa_piece", outline="")
        
        start_pos = None
        end_pos = None
        for x in range(0, 1000, 10):
            for y in range(0, 1000, 10):
                a = mappa.create_rectangle(x, y, x + 10, y + 10, outline="", tags=("grid", "empty"))
                x1, y1, x2, y2 = mappa.coords(a)
                collision = mappa.find_overlapping(x1, y1, x2, y2)
                collist = [collisione for collisione in collision if collisione not in (p1, p2)]
                if len(collist) > 1:
                    mappa.itemconfig(a, tags=("grid", "obstacle", "colored"))
                if game.collision_detection(a, p2) and not start_pos:
                    start_pos = (x, y)
                    mappa.itemconfig(a, tags=("grid", "start", "colored"))
                if game.collision_detection(a, p1) and not end_pos:
                    end_pos = (x, y)
                    mappa.itemconfig(a, tags=("grid", "end", "colored"))

        if start_pos and end_pos:
            path = a_star(mappa, start_pos, end_pos)
            if path:
                for step in path:
                    overlapping = mappa.find_overlapping(step[0], step[1], step[0]+10, step[1]+10)
                    for obj in overlapping:
                        if "empty" in mappa.gettags(obj):
                            mappa.itemconfig(obj, tags=("grid", "path", "colored"))
                    
        for a in mappa.find_withtag("start"):
            mappa.itemconfig(a,tags = ("grid","empty"))
        for a in mappa.find_withtag("end"):
            mappa.itemconfig(a,tags = ("grid","empty"))
        x1,y1,x2,y2 = mappa.coords(p2)
        for a in mappa.find_overlapping(x1+14,y1+14,x2-14,y2-14):
            tags = mappa.gettags(a)
            if len(tags) > 1:
                if tags[1] == "empty":
                    mappa.itemconfig(a,tags = ("grid","start","colored"))
        x1,y1,x2,y2 = mappa.coords(p1)
        for a in mappa.find_overlapping(x1+14,y1+14,x2-14,y2-14):
            tags = mappa.gettags(a)
            if len(tags) > 1:
                if tags[1] == "empty":
                    mappa.itemconfig(a,tags = ("grid","end","colored"))
    def update_nodes(self,Event = None):
        for a in mappa.find_withtag("start"):
            mappa.itemconfig(a,tags = ("grid","empty"))
        for a in mappa.find_withtag("end"):
            mappa.itemconfig(a,tags = ("grid","empty"))
        x1,y1,x2,y2 = mappa.coords(p2)
        for a in mappa.find_overlapping(x1+14,y1+14,x2-14,y2-14):
            tags = mappa.gettags(a)
            if len(tags) > 1:
                if tags[1] == "empty":
                    mappa.itemconfig(a,tags = ("grid","start","colored"))
        x1,y1,x2,y2 = mappa.coords(p1)
        for a in mappa.find_overlapping(x1+14,y1+14,x2-14,y2-14):
            tags = mappa.gettags(a)
            if len(tags) > 1:
                if tags[1] == "empty":
                    mappa.itemconfig(a,tags = ("grid","end","colored"))
    def show_nodes(self,Event = None):
        if "Shift_L" in self.pulsanti:
            for obj in mappa.find_withtag("colored"):
                tags = mappa.gettags(obj)
                if tags[1] == "start":
                    mappa.itemconfigure(obj,fill ="green")
                elif tags[1] == "end":
                    mappa.itemconfigure(obj,fill="red")
                elif tags[1] == "obstacle":
                    mappa.itemconfigure(obj,fill="blue")
                elif tags[1] == "path":
                    mappa.itemconfigure(obj,fill = "purple")
            base.after(500,game.show_nodes)
        else:
            for obj in mappa.find_withtag("colored"):
                mappa.itemconfigure(obj,fill="")

    def premuto(self, event):
        if event.keysym not in self.pulsanti:
            self.pulsanti.append(event.keysym)
    def rilasciato(self,event):
        if event.keysym in self.pulsanti:
            self.pulsanti.remove(event.keysym)
    def sposta(self, Event = None):
        if "Control_L" in self.pulsanti:
            game.update_nodes()
        if "Shift_L" in self.pulsanti:
            game.show_nodes()
        if "w" in self.pulsanti:
            mappa.move(p1, 0, - v_p1.movement_distance * self.resize)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p1,obstacle):
                    mappa.move(p1, 0, 1)
        if "d" in self.pulsanti:
            mappa.move(p1, v_p1.movement_distance * self.resize, 0)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p1,obstacle):
                    mappa.move(p1, -1, 0)
        if "s" in self.pulsanti:
            mappa.move(p1, 0, v_p1.movement_distance * self.resize)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p1,obstacle):
                    mappa.move(p1, 0, -1)
        if "a" in self.pulsanti:
            mappa.move(p1, - v_p1.movement_distance * self.resize, 0)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p1,obstacle):
                    mappa.move(p1, 1, 0)
        if "i" in self.pulsanti or "Up" in self.pulsanti:
            mappa.move(p2, 0, - v_p2.movement_distance * self.resize)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p2,obstacle):
                    mappa.move(p2, 0, 1)
        if "l" in self.pulsanti or "Right" in self.pulsanti:
            mappa.move(p2, v_p2.movement_distance * self.resize, 0)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p2,obstacle):
                    mappa.move(p2, -1, 0)
        if "k" in self.pulsanti or "Down" in self.pulsanti:
            mappa.move(p2, 0, v_p2.movement_distance * self.resize)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p2,obstacle):
                    mappa.move(p2, 0, -1)
        if "j" in self.pulsanti or "Left" in self.pulsanti:
            mappa.move(p2, - v_p2.movement_distance * self.resize, 0)
            for obstacle in mappa.find_withtag("mappa_piece"):
                while game.collision_detection(p2,obstacle):
                    mappa.move(p2, 1, 0)
        if self.pulsanti:
            if self.pulsanti[-1] == "w":
                v_p1.gunpos = "n"
            elif self.pulsanti[-1] == "a":
                v_p1.gunpos = "o"
            elif self.pulsanti[-1] == "s":
                v_p1.gunpos = "s"
            elif self.pulsanti[-1] == "d":
                v_p1.gunpos = "e"
            if self.pulsanti[-1] == "i" or self.pulsanti[-1] == "Up":
                v_p2.gunpos = "n"
            elif self.pulsanti[-1] == "j" or self.pulsanti[-1] == "Left":
                v_p2.gunpos = "o"
            elif self.pulsanti[-1] == "k" or self.pulsanti[-1] == "Down":
                v_p2.gunpos = "s"
            elif self.pulsanti[-1] == "l" or self.pulsanti[-1] == "Right":
                v_p2.gunpos = "e"
        v_p1.weapon_update()
        v_p2.weapon_update()
        base.after(50, self.sposta)
    def play_audio(self,audio):
        if pygamePIP:
            pygame.init()
            pygame.mixer.init()
            pygame.mixer.music.load(BytesIO(base64.b64decode(audio)))
            pygame.mixer.music.play()
    def bullet_movement(event = None):
        for obj_id in mappa.find_withtag("bullet"):
            x1, y1, x2, y2 = mappa.coords(obj_id)
            if x1 < 0-100 or y1 < 0-100 or x2 > game.map_width+100 or y2 > game.map_height+100:
                mappa.delete(obj_id)
        base.after(50, game.bullet_movement)
    def manual_console_control(event = None):
        cmd = input("")
        if cmd.startswith("weapon("):
            cmd = cmd[7:-1]
            list = cmd.split(',')
            x = int(list[0])
            y = int(list[1])
            if x == 1:
                if y != v_p1.weapon and y < 4:
                    v_p1.weapon = y
                    v_p1.stats_load()
                elif y == v_p2.weapon:
                    print("the weapon is already equipped")
                else:
                    print("invalid weapon")
            if x == 2:
                if y != v_p2.weapon and y < 4:
                    v_p2.weapon = y
                    v_p2.stats_load()
                elif y == v_p2.weapon:
                    print("the weapon is already equipped")
                else:
                    print("invalid weapon")
        base.after(50, game.manual_console_control)
    def collision_detection(self,collide,collided):
        overlapping = mappa.find_overlapping(*mappa.bbox(collided))
        return collide in overlapping
    def sniper_collision(self,collide,collided,shooter,direction):
        if len(mappa.coords(collide)) != 0 :
            x1, y1, x2, y2 = mappa.coords(collide)
            px1,py1,px2,py2 = mappa.coords(collided)
            ppx1, ppy1, ppx1, ppy1 = mappa.coords(shooter)
            if (direction == "n" and px1 <= x1 <= px2 and y1+50 >= py1 >= y1 and py1 < ppy1) or \
                (direction == "e" and py1 <= y1 <= py2 and x1-50 <= px1 <= x1 and px1 > ppx1) or \
                (direction == "s" and px1 <= x1 <= px2 and y1-50 <= py1 <= y1 and py1 > ppy1) or \
                (direction == "o" and py1 <= y1 <= py2 and x1+50 >= px1 >= x1 and px1 < ppx1):
                return True
            else:
                return False
        else:
            return False
    def collision_detection_tag(self, tag1, tag2):
        for id1 in mappa.find_withtag(tag1):
            x1, y1, x2, y2 = mappa.bbox(id1)
            for id2 in mappa.find_withtag(tag2):
                x3, y3, x4, y4 = mappa.bbox(id2)
                if (x1 < x4 and x2 > x3 and y1 < y4 and y2 > y3):
                    return True
        return False
    def shoot(self, event = None):
        if "space" in game.pulsanti:
            if v_p1.weapon != 2 or v_p1.minigun_cooldown >= 0 and v_p1.minigun_cooldown <= 30:
                D_time = time.time() - v_p1.start_time
                if D_time >= v_p1.reload_speed:
                    if v_p1.weapon != 3:
                        if not game.collision_detection_tag(v_p1.whid,"mappa_piece"):
                            v_p1.bullet_plot()
                        if v_p1.weapon == 1:
                            game.play_audio(game.sniper_shoot)
                            base.after(int((v_p1.reload_speed-0.86)*1000),game.play_audio,game.sniper_reload)   
                        elif v_p1.weapon == 0:
                            game.play_audio(game.pistol_shoot)                             
                    else:
                        if not game.collision_detection_tag(v_p1.whid,"mappa_piece"):
                            v_p1.bullet_plot()
                            mappa.after(100, v_p1.bullet_plot)
                            mappa.after(200, v_p1.bullet_plot)
                        game.play_audio(game.burst_shoot)
                        mappa.after(100, game.play_audio,game.burst_shoot)
                        mappa.after(200, game.play_audio,game.burst_shoot)
                    v_p1.start_time = time.time()
            elif v_p1.minigun_cooldown > 30:
                v_p1.minigun_cooldown = -20
            if v_p1.weapon == 2:
                v_p1.minigun_cooldown +=1
                if v_p1.minigun_cooldown > 0:
                    game.play_audio(game.minigun_shoot)
        else:
            if v_p1.minigun_cooldown < -5:
                v_p1.minigun_cooldown += 1 
            elif v_p1.minigun_cooldown > -5:
                v_p1.minigun_cooldown -= 1
        if "Return" in game.pulsanti:
            if v_p1.weapon != 2 or v_p2.minigun_cooldown >= 0 and v_p2.minigun_cooldown <= 30:
                D_time = time.time() - v_p2.start_time
                if D_time >= v_p2.reload_speed:
                    if v_p2.weapon != 3:
                        if not game.collision_detection_tag(v_p2.whid,"mappa_piece"):
                            v_p2.bullet_plot()
                        if v_p2.weapon == 1:
                            game.play_audio(game.sniper_shoot)
                            base.after(int((v_p2.reload_speed-0.86)*1000),game.play_audio,game.sniper_reload)
                        elif v_p2.weapon == 0:
                            game.play_audio(game.pistol_shoot)        
                    else:
                        if not game.collision_detection_tag(v_p2.whid,"mappa_piece"):    
                            v_p2.bullet_plot()
                            mappa.after(100, v_p2.bullet_plot)
                            mappa.after(200, v_p2.bullet_plot)
                        game.play_audio(game.burst_shoot)
                        mappa.after(100, game.play_audio,game.burst_shoot)
                        mappa.after(200, game.play_audio,game.burst_shoot)
                    v_p2.start_time = time.time()
            elif v_p2.minigun_cooldown > 30:
                v_p2.minigun_cooldown = -20
            if v_p2.weapon == 2:
                v_p2.minigun_cooldown +=1
                if v_p2.minigun_cooldown > 0:
                    game.play_audio(game.minigun_shoot)
        else:
            if v_p2.minigun_cooldown < -5:
                v_p2.minigun_cooldown += 1 
            elif v_p2.minigun_cooldown > -5:
                v_p2.minigun_cooldown -= 1
        base.after(50, game.shoot)
class player:
    def __init__(self, pid, tpid, wid,whid, eid, health, movement_distance, damage_taken, minigun_cooldown, gunpos, weapon, minigun, start_time, damage, bullet_speed, bullet_dropoff, reload_speed):
        self.pid = pid
        self.tpid = tpid
        self.wid = wid
        self.whid = whid
        self.eid = eid
        self.health = health
        self.movement_distance = movement_distance
        self.damage_taken = damage_taken
        self.minigun_cooldown = minigun_cooldown
        self.gunpos = gunpos
        self.weapon = weapon
        self.minigun = minigun
        self.start_time = start_time    
        self.damage = damage
        self.bullet_speed = bullet_speed
        self.bullet_dropoff = bullet_dropoff
        self.reload_speed = reload_speed
    def weapon_update(self):
        mappa.delete(self.wid)
        def coord_get(x):
            c = game.weapon_coordinates[self.weapon]
            if self.gunpos == "e":
                x1 = c[x][0][0] * game.resize - game.weapon_offset * game.resize
                y1 = c[x][0][1] * game.resize 
                x2 = c[x][1][0] * game.resize - game.weapon_offset * game.resize
                y2 = c[x][1][1] * game.resize
            elif self.gunpos == "n":
                y1 = c[x][0][0] * game.resize * -1 + player_size * game.resize + game.weapon_offset * game.resize
                x1 = c[x][0][1] * game.resize
                y2 = c[x][1][0] * game.resize * -1 + player_size * game.resize + game.weapon_offset * game.resize
                x2 = c[x][1][1] * game.resize
            elif self.gunpos == "s":
                y1 = c[x][0][0] * game.resize - game.weapon_offset * game.resize
                x1 = player_size * game.resize + c[x][0][1] * game.resize * -1
                y2 = c[x][1][0] * game.resize - game.weapon_offset * game.resize
                x2 = player_size * game.resize + c[x][1][1] * game.resize * -1
            elif self.gunpos == "o":
                x1 = player_size * game.resize + c[x][0][0] * game.resize * -1 + game.weapon_offset * game.resize
                y1 = c[x][0][1] * game.resize
                x2 = player_size * game.resize + c[x][1][0] * game.resize * -1 + game.weapon_offset * game.resize
                y2 = c[x][1][1] * game.resize
            col = c[x][2]
            return x1, x2, y1, y2, col
        bx1, by1, bx2, by2 = mappa.coords(self.pid)
        for num in range(len(game.weapon_coordinates[self.weapon])):
            x1, x2, y1, y2, col = coord_get(num)
            if num == 0:
                mappa.create_rectangle(bx1 + x1,by1 + y1,bx1 + x2,by1 + y2, fill=col,tags=(self.wid,self.whid))
            else:  
                mappa.create_rectangle(bx1 + x1,by1 + y1,bx1 + x2,by1 + y2, fill=col,tags=self.wid)  
    def bullet_plot(self):
        c = game.bullet_coordinates
        if self.weapon != 2:
            if self.gunpos == "e":
                x1 = c[self.weapon][0][0] * game.resize
                y1 = c[self.weapon][0][1] * game.resize 
                x2 = c[self.weapon][1][0] * game.resize
                y2 = c[self.weapon][1][1] * game.resize
            elif self.gunpos == "n":
                y1 = c[self.weapon][0][0] * game.resize * -1 + player_size * game.resize
                x1 = c[self.weapon][0][1] * game.resize
                y2 = c[self.weapon][1][0] * game.resize * -1 + player_size * game.resize
                x2 = c[self.weapon][1][1] * game.resize
            elif self.gunpos == "s":
                y1 = c[self.weapon][0][0] * game.resize
                x1 = player_size * game.resize + c[self.weapon][0][1] * game.resize * -1
                y2 = c[self.weapon][1][0] * game.resize
                x2 = player_size * game.resize + c[self.weapon][1][1] * game.resize * -1
            elif self.gunpos == "o":
                x1 = player_size * game.resize + c[self.weapon][0][0] * game.resize * -1
                y1 = c[self.weapon][0][1] * game.resize
                x2 = player_size * game.resize + c[self.weapon][1][0] * game.resize * -1
                y2 = c[self.weapon][1][1] * game.resize  
        else:
            if self.minigun >= 2:
                self.minigun = 0
            else:
                self.minigun += 1
            if self.gunpos == "e":
                x1 = c[self.weapon][self.minigun][0][0] * game.resize
                y1 = c[self.weapon][self.minigun][0][1] * game.resize 
                x2 = c[self.weapon][self.minigun][1][0] * game.resize
                y2 = c[self.weapon][self.minigun][1][1] * game.resize
            elif self.gunpos == "n":
                y1 = c[self.weapon][self.minigun][0][0] * game.resize * -1 + player_size * game.resize
                x1 = c[self.weapon][self.minigun][0][1] * game.resize
                y2 = c[self.weapon][self.minigun][1][0] * game.resize * -1 + player_size * game.resize
                x2 = c[self.weapon][self.minigun][1][1] * game.resize
            elif self.gunpos == "s":
                y1 = c[self.weapon][self.minigun][0][0] * game.resize
                x1 = player_size * game.resize + c[self.weapon][self.minigun][0][1] * game.resize * -1
                y2 = c[self.weapon][self.minigun][1][0] * game.resize
                x2 = player_size * game.resize + c[self.weapon][self.minigun][1][1] * game.resize * -1
            elif self.gunpos == "o":
                x1 = player_size * game.resize + c[self.weapon][self.minigun][0][0] * game.resize * -1
                y1 = c[self.weapon][self.minigun][0][1] * game.resize
                x2 = player_size * game.resize + c[self.weapon][self.minigun][1][0] * game.resize * -1
                y2 = c[self.weapon][self.minigun][1][1] * game.resize       
        bx1, by1, bx2, by2 = mappa.coords(self.pid)
        for x in range(len(game.bullet_coordinates[self.weapon])):
            mappa.create_rectangle(bx1 + x1,by1 + y1,bx1 + x2,by1 + y2, fill="#FBC540",tags=(self.gunpos,"bullet",self.tpid, self.damage)) 
    def stats_load(self):
        self.damage = game.weapon_stats[self.weapon][0]
        self.bullet_speed = game.weapon_stats[self.weapon][1]
        self.bullet_dropoff = game.weapon_stats[self.weapon][2]
        self.reload_speed = game.weapon_stats[self.weapon][3]
        self.minigun = -1
        self.minigun_cooldown = 0
    def bullet_movement(self):
        for obj_id in mappa.find_withtag(self.tpid):
            if self.weapon != 1:
                tags = mappa.gettags(obj_id)
                if game.collision_detection(obj_id,self.eid):
                    mappa.delete(obj_id)
                    if self.pid == p1:
                        v_p2.damage_taken = float(tags[3])
                    elif self.pid == p2:
                        v_p1.damage_taken = float(tags[3])
                for obj in mappa.find_withtag("mappa_piece"):
                    if game.collision_detection(obj_id,obj):
                        mappa.delete(obj_id)
            else:
                tags = mappa.gettags(obj_id)
                for obj in mappa.find_withtag("mappa_piece"):
                        if game.sniper_collision(obj_id,obj,self.pid,tags[0]):
                            mappa.delete(obj_id)
                if game.sniper_collision(obj_id,self.eid,self.pid,tags[0]):
                    mappa.delete(obj_id)
                    if self.pid == p1:
                        v_p2.damage_taken = float(tags[3])
                    elif self.pid == p2:
                        v_p1.damage_taken = float(tags[3])
        if self.damage_taken > 0:
            if self.pid == p1:
                self.health -= v_p1.damage_taken
                hp1["value"] = v_p1.health
                v_p1.damage_taken = 0
            elif self.pid == p2:
                self.health -= v_p2.damage_taken
                hp2["value"] = v_p2.health
                v_p2.damage_taken = 0
            if self.health <= 0:
                mappa.delete(self.pid)
                mappa.delete(self.wid)
        if mappa.find_withtag("bullet"):
            for obj_id in mappa.find_withtag(self.tpid):
                tags = list(mappa.gettags(obj_id))
                if tags[0] == "n":
                    mappa.move(obj_id, 0, - self.bullet_speed * game.resize)
                elif tags[0] == "e":
                    mappa.move(obj_id, self.bullet_speed * game.resize, 0)
                elif tags[0] == "s":
                    mappa.move(obj_id, 0, self.bullet_speed * game.resize)
                elif tags[0] == "o":
                    mappa.move(obj_id, - self.bullet_speed * game.resize, 0)  
                tags[3] = float(tags[3]) - float(self.bullet_dropoff)
                if float(tags[3]) <= 0:
                    mappa.delete(obj_id)
                else:
                    mappa.itemconfig(obj_id, tags=tuple(tags))
        base.after(10, self.bullet_movement)
game = base_game()
base = tk.Tk()
base.geometry('1500x1000')
base.title("call of pixels")
base.attributes("-fullscreen", True)
base.focus_force()
mappa = tk.Canvas(base, width=game.map_width, height=game.map_height, bg="white")
mappa.pack()
mappa.focus_force()
p1 = mappa.create_rectangle(20, 20, 20 + player_size * game.resize, 20 + player_size * game.resize, fill=color1, outline=outline_color1, width=2)
p2 = mappa.create_rectangle(980 - player_size * game.resize, 980 - player_size * game.resize, 980, 980, fill=color2, outline=outline_color2, width=2)
v_p1 = player(p1,"p1","w1","w1_hitbox",p2, health1, movement_distance1, 0,0, "e", weapon1, 0, time.time(),0,0,0,0)
v_p2 = player(p2,"p2","w2","w2_hitbox",p1, health2,movement_distance2, 0,0, "o", weapon2, 0, time.time(),0,0,0,0)
game.map_plot()
game.sposta()
game.bullet_movement()
game.shoot()
v_p1.weapon_update()
v_p1.stats_load()
v_p1.bullet_movement()
v_p2.weapon_update()
v_p2.stats_load()
v_p2.bullet_movement()
hp1 = ttk.Progressbar(base, orient="horizontal", length=200, mode="determinate")
hp1.place(x=50, y = 50)
hp2 = ttk.Progressbar(base, orient="horizontal", length= 200, mode="determinate")
hp2.place(x=base.winfo_screenwidth()-250, y = 50)
hp1["value"] = v_p1.health
hp2["value"] = v_p2.health
base.bind("<Escape>", game.esci)
base.bind("<KeyPress>", game.premuto)
base.bind("<KeyRelease>", game.rilasciato)
game.manual_console_control()
base.mainloop()